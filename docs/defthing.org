#+TITLE: defthing
#+OPTIONS: toc:nil

A utility for def-y macros.

*** ~defthing~ is a macrobuilder for definining ~things~.

Example defthings:

- ~defcom~
- ~defworkspace~
- ~defkbd~

Consumers of these macros can go as far as they want:

- [[https://github.com/russmatney/ralphie][russmatney/ralphie]] focuses on supporting ~defcom~ via the command line and [[https://github.com/davatorium/rofi][Rofi]].
- [[https://github.com/russmatney/clawe][russmatney/clawe]] integrates ~defworkspace~ and ~defkbd~ with AwesomeWM and
  sxhkd (bspwm's keybinding tool), then being consumed by doctor. (I3 is well
  within reach!).
- russmatney/doctor consumes ~defworkspace~ and ~defkbd~ to present you with a
  WM bar and widgets (via electron and a clj(s) project).

** Goals
~defthing~ macros focus on presenting a data-and-repl-driven experience for
configuration and exploring. All of its dependencies will be babashka-compatible.

~defthing~ is mostly about giving you a map with a bunch of namespaced map
fields and functions attached. You'll mostly write them while cider-jacked-in,
so you want the functions to be callable and highly interactive.

** Example defthings in detail
Right now, all defthing examples are also implemented in this repo, but you've
no need to depend on them - defthing/core.clj (where the root `defthing` helpers
are defined) will never depend on them.

For most of these example features, you'll need to depend on misc pieces of
Ralphie or Clawe, or write some integrations yourself.

*** ~defcom~
- Commands to:
  - Fire on the command line (with zsh and fzf integrations)
  - Discover via rofi
  - Call as functions in you clojure lib or repl.... though it's a bit ugly right now:
#+begin_src clojure
(defcom/exec your-defcom) ;; => <your-defcom's output>
;; `your-defcom` is a map of data right now but could potentially be supported as a function
#+end_src
- Zsh, Fzf, Rofi are all supported via ~ralphie.zsh~, ~ralphie.fzf~, and
  ~ralphie.rofi~ respectively
- ~defkbds~ (below) build implicit ~defcoms~

**** ~toggle-input-mute~
Notification optional - this just runs a shell command via `babashka.process`.

#+begin_src clojure
(defkbd toggle-input-mute
  [[:mod] "m"]
  (do
    (->
      (process/$ amixer set Capture toggle)
      process/check :out slurp)
    (notify/notify
      {:notify/subject "Mute Toggled!"
       :notify/body    (if (r.pulseaudio/input-muted?)
                         "Muted!" "Unmuted!")
       :notify/id      "mute-notif"})
#+end_src
**** ~open-chess-game~
Depends on [[https://github.com/russmatney/chess][russmatney/chess]], ~ralphie.notify~, ~ralphie.rofi~, ~ralphie.browser~.

Opens rofi with your most recent lichess games, for opening in a browser.

#+begin_src clojure
(defcom open-chess-game
  (do
    (notify/notify "Fetching chess games")
    (->>
      (chess/fetch-games)
      (map (fn [{:keys [white-user black-user] :as game}]
             (assoc game
                    :rofi/label (str white-user " vs " black-user))))
      (rofi/rofi {:msg       "Open Game"
                  :on-select (fn [{:keys [lichess/url]}]
                               (notify/notify "Opening game" url)
                               (r.browser/open {:browser.open/url url}))}))))
#+end_src
**** many more defcoms are scattered through ~ralphie~
TODO include a few ralphie examples

*** ~defkbd~
- WM-level keybindings

  (though I've got my eye on writing an emacs [[https://github.com/abo-abo/hydra][hydra]] integration...)
- Writes to a ~sxhkd~ firing your the command as ~defcom~ over ~tmux~ by default
- Supports 'native' (as in zero-overhead) AwesomeWM keybindings bindings (and
  [[https://fennel-lang.org/][fennel]] for writing aWM NIFs)

The integrations are a bit more complicated here, but what clawe does right now
is read the ~defkbd/list-commands~ and write out config files for sxhkd and
awesomeWM, then attempts to reload those.

Awesome's support for reload here seems to be impossible without a
full-AwesomeWM restart, which seems to be that community's 'normal' anyway. It's
not too bad if your config is stable, but it can be a bit jarring without the
right state-management in place. See ~<clawe-repo>/awesome/*.fnl~ for my entire
config, which is slowly shrinking as clawe develops.

The big win is getting pretty good live-reload and interactive development while
working on your WM-level keybindings. A bit like exwm, but in clojure!

**** ~uuid-on-clipboard~
Depends on ~ralphie.clipboard~ and ~ralphie.notify~.

#+begin_src clojure
(defkbd uuid-on-clipboard
  [[:mod :ctrl] "u"]
  (let [uuid (str (java.util.UUID/randomUUID))]
    (notify/notify "clippy!")
    (r.clip/set-clip uuid)))
#+end_src

**** ~toggle-floating~
Depends on ~ralphie.awm~, which fires fennel into your running awesomeWM's runtime.

#+BEGIN_SRC clojure
(defkbd toggle-floating
  [[:mod] "f"]
  (awm/awm-fnl
    '(let [c _G.client.focus]
       (tset c :ontop c.floating)
       (awful.client.floating.toggle c))))
#+END_SRC

**** [[https://github.com/russmatney/clawe/tree/master/src/clawe/defs/bindings.clj][Clawe defkbds]]
*** ~defworkspace~
- your WM's workspaces (apps, scratchpads, repos)
- currently supports AwesomeWM

These definitions can be very simple, but they can grow rapidly - it really
depends on the workspace and how you want to work.

Some subsets include repo-workspaces and scratchpad-workspaces.

Scratchpads I tend to want to toggle in and out of view: Spotify, Browsers,
1password. The convenience here is a single keybinding to create the app if it's
closed, find it if it's open, and maintain a consistent floating window-position
to toggle in and out of.

Repos can get a special treatment as well, as you tend to want a few things
associated with them - a tmux session, a terminal client, an emacs window and
client, a dev-browser with the right default urls. ~defworkspace~ gives the
baseline data model for attaching and executing functions in a workspace
context, like toggle-emacs, toggle-term, etc.

**** ~beatemup-two~
A workspace for a game repo.

~{:git/check-status? true}~ opts-in to git-repo tracking, which can set flags
for things like ~:git/dirty?~, ~:git/needs-push?~, ~:git/needs-pull?~. (right
now via ~clawe.workspaces/apply-git-status~).

#+begin_src clojure
(defworkspace beatemup-two
  "beatemup-one rebuilt in godot"
  {:workspace/directory "godot/beatemup-two"}
  {:git/check-status? true}
  defs.wrk/awesome-rules
  defs.wrk/workspace-repo)
#+end_src
**** ~baskerville-sxhkd~
For perusing/contributing to sxhkd.

#+begin_src clojure
(defworkspace baskerville-sxhkd
  "A keybinding daemon."
  {:workspace/directory "baskerville/sxhkd"}
  workspace-repo
  awesome-rules)
#+end_src
**** ~spotify~
#+begin_src clojure
(defworkspace spotify
  {:awesome/rules
   (awm-workspace-rules "spotify"  "Spotify" "Pavucontrol" "pavucontrol")}
  {:workspace/directory        "."
   :workspace/initial-file     ".config/spicetify/config.ini"
   :workspace/exec             "spotify"
   :workspace/scratchpad       true
   :workspace/scratchpad-class "Spotify"
   :rules/is-my-client?
   (fn [c]
     (let [matches
           #{"spotify" "Spotify"}
           {:awesome.client/keys [name class]} c]
       (or (matches name) (matches class))))}
  workspace-repo)

#+end_src
**** ~web~
#+begin_src clojure
(defworkspace web
  {:awesome/rules
   (awm-workspace-rules "web" "firefox")}
  {:workspace/directory        "."
   :workspace/exec             "/usr/bin/gtk-launch firefox.desktop"
   :workspace/scratchpad       true
   :workspace/scratchpad-class "firefox"
   :rules/is-my-client?
   (fn [c]
     (let [matches                             #{"firefox" "web"}
           {:awesome.client/keys [name class]} c]
       (or (matches name) (matches class))))}
  workspace-repo)
#+end_src
**** ~journal~
#+begin_src clojure
(defworkspace journal
  awesome-rules
  {:workspace/directory        "Dropbox/todo"
   :workspace/initial-file     "journal.org"
   :workspace/scratchpad       true
   :workspace/scratchpad-class "Emacs"
   :rules/is-my-client?
   (fn [c]
     (let [matches                             #{"journal" "clover/doctor-dock"}
           {:awesome.client/keys [name class]} c]
       (or (matches name) (matches class))))})
#+end_src
**** [[https://github.com/russmatney/clawe/tree/master/src/clawe/defs/workspaces.clj][Clawe workspaces]]
** defthings? x-or-fs? How does this work?
defthing works mostly by merging maps together.

Take ~defx~ for example, (or run this in the user.clj)

#+BEGIN_SRC clojure
(ns user
  (:require
   [defthing.core :as defthing]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Implementation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def x-key :clawe/xs)
(defmacro defx [title & args]
  (apply defthing/defthing x-key title args))

(defn list-xs []
  (defthing/list-things x-key))

(defn get-x [x]
  (defthing/get-thing x-key (comp #{(:name x x)} :name)))


;; A consumer
(defx my-x
  {:some/key "some-data"})

;; In this simple case, this is roughly equivalent to:
(def _my-x
  {:name     "my-x"
   :some/key "some-data"})

;; the reality:
{:defthing.core/registry-key :user/my-x
 :name                       "my-x"
 :type                       :clawe/xs
 :ns                         "user"
 :some/key                   "some-data"}

;; Now you can list all your ~xs~, or search for an ~x~ by name.
(get-x "my-x")
(list-xs)

;; ~defthing~ can be handed functions or maps. The maps are merged, and the
;; functions are called with the state of the map - whatever has built up to that
;; point.

(defx my-other-x
  {:number 7}
  ;; functions are handed the map to this point
  (fn [{:keys [name number]}] ;; :name is set by default to the first arg
    {:x/id (str number "-" name)}) ;; `my-other-x` gets {:x/id "7-my-other-x"} merged in

  {:some/key :another/value} ;; merges in
  (fn [{:some/keys [key]}]
    (println key)) ;; prints :another/value

  ;; functions might fit some api
  {:some/important-function (fn [] (println "do something important"))})

my-other-x ;; evals to:
{:defthing.core/registry-key :user/my-other-x

 :name     "my-other-x"
 :type     :clawe/xs
 :ns       "user"
 :number   7
 :x/id     "7-my-other-x"
 :some/key :another/value

 ;; note that functions like these don't always transit very well!
 :some/important-function #function[user/fn--8463]}
#+END_SRC

You can find more examples in the unit tests, and more documentation on the
function and macro docstrings in the source code.

** defthing is very much a work in progress
I'm expanding use-cases for this all the time, and trying to find the right
line to cut this abstraction on. Originally I thought only consumers should
define the macros, but I've grouped them together to make them more accessible
to individual programs/libraries. Otherwise everyone needs to depend on `clawe`
or `ralphie` when they might prefer to cherry-pick.
