{:paths ["src" "test"]
 :deps  {}
 :tasks
 {:requires ([clojure.string :as string]
             [clojure.pprint :as pprint]
             [clojure.tools.logging :as log]
             [babashka.fs :as fs]
             [babashka.process :as p])

  :enter (println "Entering:" (:name (current-task)))
  :init
  (do
    (def doctor-fe-url "http://localhost:3333")
    (def doctor-tauri-executable "./src-tauri/target/debug/doctor")

    (defn env [s] (System/getenv s))

    (defn home-dir []
      (-> (shell {:out :string}
                 "zsh -c 'echo -n ~'")
          :out))

    (defn pp [x]
      (binding [pprint/*print-right-margin* 130]
        (pprint/pprint x)))

    (defn run-doctor-tauri-app [name]
      (let [url   (str doctor-fe-url "/" name)
            title (str "tauri/doctor-" name)
            label name
            cmd   (str doctor-tauri-executable " create-window"
                       " --title " title " --label " label " --url " url)]
        (pp (str "Running doctor tauri app: " cmd))
        (shell {:dir (str (home-dir) "/russmatney/clawe")} cmd))))

  home (pp (home-dir))

  clj-kondo      (shell "clj-kondo --lint src")
  clj-kondo-test (shell "clj-kondo --lint test")

  test-unit
  {:doc  "Run clawe unit tests."
   :task (shell "./test_runner.clj")}

  clawe-install
  {:doc  "Rebuild the clawe uberjar"
   :task (let [cp (-> ^{:out :string} (p/$ clojure -A:remove-clojure -Spath) p/check :out)]
           (shell (str "bb -cp " cp " --uberjar clawe.jar -m clawe.core")))}
  install-clawe {:depends [clawe-install]}

  dev-doctor
  {:doc "Assess the local environment for any issues"
   :task
   (do
     (shell "systemctl --no-pager --user status doctor-be doctor-fe doctor-topbar")
     (pp "TODO impl ensure local symlinks")
     (let [tauri-doctor-executable "./src-tauri/target/debug/doctor"]
       (when-not (fs/file-exists? tauri-doctor-executable)
         (pp (str "Missing tauri doctor executable! " tauri-doctor-executable)))))}

  dev-deps
  {:doc "Perform any install and build steps required for development"
   :task
   ;; build towards a dev-env doctor command
   (do
     ;; install yarn deps
     (shell "yarn install")

     ;; build tailwind styles
     (log/info "TODO Consider bb/fs modified since for caching/faster re-builds")
     (shell "yarn build")

     ;; local symlinks
     (log/info "TODO impl ensure local symlinks (ln -s ~/Screenshots public/assets/screenshots)")
     (shell "l public/assets")

     ;; tauri
     (shell {:dir "./src-tauri"}
            "cargo install tauri-cli --git https://github.com/tauri-apps/tauri"))}

  tauri-dev
  {:doc "Run tauri in dev mode, rebuilding the exec on local rust changes."
   :task
   (shell
     {:dir (str (home-dir) "/russmatney/clawe/src-tauri")}
     "cargo tauri dev")}

  doctor-be {:doc
             "Run the doctor backend. Consumed from systemd service."
             :task
             (shell {:dir (str (home-dir) "/russmatney/clawe")}
                    "clj -M:dev:doctor-deps:doctor-server")}
  doctor-fe {:doc
             "Run the doctor frontend shadowcljs server. Consumed from systemd service."
             :task
             (shell {:dir (str (home-dir) "/russmatney/clawe")}
                    "npx shadow-cljs watch doctor-app")}

  topbar {:doc  "Run the doctor topbar via tauri. Consumed from systemd service."
          :task (run-doctor-tauri-app "topbar")}
  popup  {:doc  "Run the doctor popup window via tauri."
          :task (run-doctor-tauri-app "popup")}
  todo   {:doc  "Run the doctor todo window via tauri."
          :task (run-doctor-tauri-app "todo")}

  restart-doctor (do
                   (shell "systemctl --user daemon-reload")
                   (shell "systemctl --user restart doctor-be doctor-fe doctor-topbar"))
  doctor-restart {:depends [restart-doctor]}

  stop-doctor (shell "systemctl --user stop doctor-be doctor-fe doctor-topbar")
  doctor-stop {:depends [stop-doctor]}

  log-doctor   {:task (shell "journalctl --user -n 100 -f -u doctor-be -u doctor-fe -u doctor-topbar")
                :doc  "Tail the doctor logs. FE, BE, and topbar via journalctl"}
  tail-doctor  (run 'log-doctor)
  doctor-log   (run 'log-doctor)
  doctor-tail  (run 'log-doctor)
  log-awesome  {:task (shell "tail -f /home/russ/.cache/awesome/logs")
                :doc  "Tail the awesome logs, via ~/.cache/awesome/logs"}
  tail-awesome (run 'log-awesome)
  awesome-tail (run 'log-awesome)
  awesome-log  (run 'log-awesome)}}
