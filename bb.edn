{:paths ["src" "test" "resources"]
 :deps  {babashka/fs                        {:mvn/version "0.1.11"}
         org.babashka/cli                   {:mvn/version "0.4.37"}
         metosin/malli                      {:mvn/version "0.8.9"}
         com.lambdaisland/specmonstah-malli {:mvn/version "0.0.7"}
         aero/aero                          {:mvn/version "1.1.6"}

         teknql/systemic {:local/root "/home/russ/teknql/systemic"}
         teknql/wing     {:local/root "/home/russ/teknql/wing"}

         ;; found these in specmonstah's bb.edn: https://github.com/reifyhealth/specmonstah/blob/develop/bb.edn
         org.clojure/core.specs.alpha {:mvn/version "0.2.62"}
         org.babashka/spec.alpha      {:git/url "https://github.com/babashka/spec.alpha"
                                       :git/sha "1a841c4cc1d4f6dab7505a98ed2d532dd9d56b78"}

         io.github.borkdude/quickblog
         {:local/root "../../borkdude/quickblog"}}
 :tasks
 {:requires ([clojure.string :as string]
             [clojure.pprint :as pprint]
             [clojure.tools.logging :as log]
             [babashka.fs :as fs]
             [babashka.process :as p])

  :enter (println "Entering:" (:name (current-task)))
  :init
  (do
    (def doctor-fe-url "http://localhost:3333")
    (def doctor-tauri-executable "./src-tauri/target/debug/doctor")

    (defn env [s] (System/getenv s))

    (defn home-dir []
      (-> (shell {:out :string}
                 "zsh -c 'echo -n ~'")
          :out))

    (defn pp [x]
      (binding [pprint/*print-right-margin* 130]
        (pprint/pprint x)))

    (defn shelll
      ([args]
       (shelll nil args))
      ([opts args]
       (pp args)
       (shell opts args)))

    (defn run-doctor-tauri-app
      ([name] (run-doctor-tauri-app nil name))
      ([opts name]
       (let [url   (:url opts (str doctor-fe-url "/" name))
             title (str "tauri/doctor-" name)
             label name
             cmd   (str doctor-tauri-executable " create-window"
                        " --title " title " --label " label " --url " url)]
         (pp (str "Running doctor tauri app: " cmd))
         (shell {:dir (str (home-dir) "/russmatney/clawe")} cmd)))))

  home (pp (home-dir))

  clj-kondo      (shell "clj-kondo --lint src")
  clj-kondo-test (shell "clj-kondo --lint test")

  test-unit
  {:doc  "Run clawe unit tests."
   :task (shell "./test_runner.clj")}

  clawe-install
  {:doc  "Rebuild the clawe uberjar"
   :task (let [cp (-> ^{:out :string} (p/$ clojure -A:remove-clojure -Spath) p/check :out)]
           (shell (str "bb -cp " cp " --uberjar clawe.jar -m clawe.core")))}
  install-clawe {:depends [clawe-install]}


  outdated (clojure "-M:full-stack-deps:outdated")

  dev-doctor
  {:doc "Assess the local environment for any issues"
   :task
   (do
     (shell "systemctl --no-pager --user status doctor-be doctor-fe doctor-topbar")
     (pp "TODO impl ensure local symlinks")
     (let [tauri-doctor-executable "./src-tauri/target/debug/doctor"]
       (when-not (fs/file-exists? tauri-doctor-executable)
         (pp (str "Missing tauri doctor executable! " tauri-doctor-executable)))))}

  dev-deps
  {:doc "Perform any install and build steps required for development"
   :task
   ;; build towards a dev-env doctor command
   (do
     ;; install yarn deps
     (shelll "yarn install")

     ;; local symlinks
     (log/info "TODO impl ensure local symlinks (ln -s ~/Screenshots public/assets/screenshots)")
     (shelll "l public/assets")

     ;; tauri
     (shelll {:dir "./src-tauri"}
             "cargo install tauri-cli --git https://github.com/tauri-apps/tauri"))}

  tauri-dev
  {:doc "Run tauri in dev mode, rebuilding the exec on local rust changes."
   :task
   (shell
     {:dir (str (home-dir) "/russmatney/clawe/src-tauri")}
     "cargo tauri dev")}

  doctor-be {:doc "Run the doctor backend."
             :task
             (shelll {:dir (str (home-dir) "/russmatney/clawe")}
                     "clj -M:dev:full-stack-deps:doctor-server")}
  doctor-fe {:doc "Run the doctor frontend shadowcljs server."
             :task
             (shelll {:dir (str (home-dir) "/russmatney/clawe")}
                     "npx shadow-cljs watch doctor-app")}

  expo-be {:doc "Run the expo backend shadowcljs server."
           :task
           (shelll {:dir (str (home-dir) "/russmatney/clawe")}
                   "clj -M:dev:full-stack-deps:expo-server")}
  expo-fe {:doc "Run the expo frontend shadowcljs server."
           :task
           (shelll {:dir (str (home-dir) "/russmatney/clawe")}
                   "npx shadow-cljs watch expo-app")}

  expo-deploy
  {:doc "Build and deploy expo-fe"
   :task
   (do
     ;; (shelll "rm -rf expo/public/js/compiled/cljs-runtime")
     (shelll "npx shadow-cljs release expo-app")
     (shelll "aws s3 sync expo/public s3://danger.russmatney.com"))}


  clawe-be          {:doc "Run the doctor and expo backends."
                     :task
                     (run '-clawe-be {:parallel true})}
  -clawe-be         {:depends [doctor-be expo-be]}
  clawe-fe          {:doc "Run the doctor and expo frontends via shadowcljs."
                     :task
                     (shelll {:dir (str (home-dir) "/russmatney/clawe")}
                             "npx shadow-cljs watch expo-app doctor-app")}
  clawe-full-stack  (run '-clawe-full-stack {:parallel true})
  -clawe-full-stack {:depends [clawe-be clawe-fe]}

  topbar {:doc  "Run the doctor topbar via tauri. Consumed from systemd service."
          :task (run-doctor-tauri-app "topbar")}
  popup  {:doc  "Run the doctor popup window via tauri."
          :task (run-doctor-tauri-app "popup")}
  todo   {:doc  "Run the doctor todo window via tauri."
          :task (run-doctor-tauri-app "todo")}
  clerk  {:doc  "Run the doctor clerk window via tauri."
          ;; TODO capture/share/source of truth for this magic PORT?
          :task (run-doctor-tauri-app {:url "http://localhost:8888"} "clerk")}

  restart-doctor        (do
                          (shell "systemctl --user daemon-reload")
                          ;; TODO osx: run as brew services with dedicated log files
                          (shell "systemctl --user restart doctor-be doctor-fe doctor-topbar"))
  doctor-restart        (run 'restart-doctor)
  restart-doctor-be     (shell "systemctl --user restart doctor-be")
  doctor-restart-be     (run 'restart-doctor-be)
  restart-doctor-fe     (shell "systemctl --user restart doctor-fe")
  doctor-restart-fe     (run 'restart-doctor-fe)
  restart-doctor-topbar (shell "systemctl --user restart doctor-topbar")
  doctor-restart-topbar (run 'restart-doctor-topbar)

  stop-doctor (shell "systemctl --user stop doctor-be doctor-fe doctor-topbar")
  doctor-stop {:depends [stop-doctor]}

  ;; TODO osx: pull from proper server/fe logs
  log-doctor         {:task (shell "journalctl --user -n 100 -f -u doctor-be -u doctor-fe -u doctor-topbar")
                      :doc  "Tail the doctor logs. FE, BE, and topbar via journalctl"}
  tail-doctor        (run 'log-doctor)
  doctor-log         (run 'log-doctor)
  doctor-tail        (run 'log-doctor)
  log-doctor-fe      {:task (shell "journalctl --user -n 100 -f -u doctor-fe")}
  tail-doctor-fe     (run 'log-doctor-fe)
  doctor-log-fe      (run 'log-doctor-fe)
  doctor-tail-fe     (run 'log-doctor-fe)
  log-doctor-be      {:task (shell "journalctl --user -n 100 -f -u doctor-be")}
  tail-doctor-be     (run 'log-doctor-be)
  doctor-log-be      (run 'log-doctor-be)
  doctor-tail-be     (run 'log-doctor-be)
  log-doctor-topbar  {:task (shell "journalctl --user -n 100 -f -u doctor-topbar")}
  tail-doctor-topbar (run 'log-doctor-topbar)
  doctor-log-topbar  (run 'log-doctor-topbar)
  doctor-tail-topbar (run 'log-doctor-topbar)

  log-awesome  {:task (shell "tail -f /home/russ/.cache/awesome/logs")
                :doc  "Tail the awesome logs, via ~/.cache/awesome/logs"}
  tail-awesome (run 'log-awesome)
  awesome-tail (run 'log-awesome)
  awesome-log  (run 'log-awesome)}}
