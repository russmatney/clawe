#+TITLE: Clawe
#+startup: overview

#+begin_quote Toy Story
Buzz: This is an intergalactic emergency. I need to commandeer your vessel to Sector 12. Who's in charge here?

All Aliens: [pointing up]  The clawwwwwwwww[e]!

Alien #1: The claw is our master.

Alien #2: The claw chooses who will go and who will stay.

Woody: This is ludicrous.
#+end_quote

Clawe (from CLojure-AWEsome) is a Clojure-centric AwesomeWM configuration.

- [[https://awesomewm.org/][AwesomeWM]] provides the api and mental model for window management
- [[https://clojure.org/][Clojure]] provides a fantastic language, an interactive repl, etc etc
  + [[https://github.com/babashka/babashka][Babashka]] makes it reasonable to develop in a clojure repl and have a result
    as accessible as a bash script

Clawe pulls these things together to provide a reasonable feedback loop while
working on your development environment.

* AwesomeWM config
This repo contains a full awesome configuration in the ~awesome/~ directory. It
is written almost entirely in [[https://fennel-lang.org/][Fennel]], which is a clojure-y lisp that compiles to
lua.

* Monorepo
I was breaking things out into separate repos for a bit, but have recently moved
back to a monorepo. There are several top-level namespaces:

- Ralphie - originally here: [[https://github.com/russmatney/ralphie][russmatney/ralphie]]

  Ralphie is a collection of thin layers over misc tools (e.g. i3, awesomewm,
  emacs, tmux, screenshots, browsers). It does not attempt to handle any state,
  and instead provides pure apis for misc tools. When we want to reach for state
  or some other logic, we elevate the function to a clawe namespace.

  The goal is to allow other consumers to use ralphie as an independent library,
  without requiring clawe's typical setup and dependencies.

  Ralphie's old readme is here: [[file:docs/ralphie.md][Ralphie old readme]]

- Defthing - originally here: [[https://github.com/russmatney/defthing][russmatney/defthing]]

  A macro-helper supporting data-driven collections. See the defthing [[file:docs/defthing.org][docs]] or
  [[file:test/defthing/core_test.clj][tests]] for more.

- Chess - originally here: [[https://github.com/russmatney/defthing][russmatney/defthing]]

  Pulls a list of recent games from lichess. Configured via
  resources/config.edn or env vars.

- Doctor
- Expo

* Install
To install the uberjar for the first time:

#+BEGIN_SRC
# from clawe project root
bb -cp $(clojure -Spath) --uberjar clawe.jar -m clawe.core
# or
bb install
#+END_SRC

* Development
** Clojure dev
Visit any clojure file in the repo, then ~M-x cider-jack-in-clj~, which might be
bound to ~SPC c '~.

Here's [[file:src/user.clj][src/user.clj]] and [[file:src/clawe/core.clj][src/clawe/core.clj]]
** Logs
AwesomeWM Logs can be viewed in the terminal with something like:

#+begin_src shell
tail -f ~/.cache/awesome/logs | bat --paging=never -l lua
#+end_src

Note that this expects you to run AwesomeWM with logging enabled, is explained
briefly in their FAQ: https://awesomewm.org/apidoc/documentation/90-FAQ.md.html
(search `logs`).

You can also [[file:~/.cache/awesome/logs][visit this file in emacs]].
